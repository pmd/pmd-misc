<?xml version="1.0" encoding="UTF-8"?>
<project name="tpbuild" default="compile" basedir=".">

	<!-- TODO: Trouver comment récupérer une variable d'environnement,
				c'est à dire une variable définie par le système d'exploitation
				sous forme de propriété -->
	<property name="version"	value="1.0"/>
	<property name="src"		value="src"/>
	<property name="lib"		value="lib"/>

	<property name="build"		value="build"/>


	<target name="init">
		<mkdir dir="${build}"/>
	</target>

	<target name="clean">
		<!-- TODO SECOND: Nettoie le projet des artefacts temporaires
			(fichiers classes issus de la compilation,
			 fichiers html générés par l'outil javadoc
				...) -->
	</target>

	<target name="compile">
		<!-- TODO FIRST: Compile les sources du projet Ã  l'aide de la tÃ¢che 'javac':
				http://ant.apache.org/manual/CoreTasks/javac.html
			* Attention à placer, dans un répertoire 'classes', lui-même dans
			le répertoire 'build', le résultat de la compilation.* -->
	</target>

	<target name="javadoc">
		<!-- TODO: Générer la documentation des sources du projet -->
	</target>

	<target name="release" depends="package,javadoc">
		<!-- TODO THIRD: La release est un répertoire zippé contenant:
				les sources, le jar avec la version -->
	</target>

	<target name="tests" depends="compile">
		<!-- TODO: Compiler et exÃ©cuter les tests unitaires avec JUnit -->
	</target>

	<target name="package" depends="compile,tests">
	<!--	TODO: Après compilation, les fichiers .class sont
			regroupés dans une archive 'jar' sous le nom
			tpbuild-3ctXXX.jar

			TODO: Le jar n'est qu'un simple ZIP des class avec un fichier MANIFEST
					Dans ce dernier, on peut indiquer beaucoup de choses, notamment
					le numéro de version du projet. Trouver comment ajouter le
					numéro de version.-->
	</target>
	<!-- EXTRA:
		* Utiliser le projet Checkstyle pour vérifier les règles de style de code
			- http://checkstyle.sourceforge.net/anttask.html
		* Utiliser le projet PMD pour vérifier le respect de bonnes pratiques et de régles de programmation
			- http://pmd.sourceforge.net/ant-task.html
		* Utiliser Emma pour étudier la couverture de code (à quel point les tests unitaires couvrent
			toutes les utilisations possibles du code existant) :
			- installation : http://emma.sourceforge.net/reference/ch01.html
			- utilisation : http://emma.sourceforge.net/reference/

		Attention, tout ces outils nécessiteront des bibliothèques en plus et surtout de définir
		une nouvelle tâche avec "TaskDef"...

		* Comme vous l'avez vu, il ne faut pas placer de fichier binaire comme des jars
		dans le CVS. Plutot que d'imposer Ã  l'utilisateur de ce projet de télécharger un à un
		tous les jars nécessaires, vous pouvez concevoir une tâche qui télécharge ces jars
		s'ils ne sont pas présents dans le répertoire ( et Ã©viter ainsi de stocker les jars
		dans le CVS). Attention, vous devrez configurer Ant pour qu'il utilise le
		proxy de l'école : proxy.esme.fr.-->
</project>
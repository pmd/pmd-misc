/* Generated By:JJTree&JavaCC: Do not edit this line. XPath2ParserConstants.java */
package net.sourceforge.pmd.jerry.ast.xpath;

public interface XPath2ParserConstants {

  int EOF = 0;
  int MINUS = 5;
  int COMMA = 6;
  int COLON = 7;
  int COLON_COLON = 8;
  int BANG_EQUAL = 9;
  int QUESTION_MARK = 10;
  int SLASH = 11;
  int SLASH_SLASH = 12;
  int DOT = 13;
  int DOT_DOT = 14;
  int OPEN_PAREN = 15;
  int CLOSE_PARAN = 16;
  int OPEN_BRACKET = 17;
  int CLOSE_BRACKET = 18;
  int AT = 19;
  int DOLLAR = 20;
  int STAR = 21;
  int PLUS = 22;
  int LESS_THAN = 23;
  int PRECEEDS_OPERATOR = 24;
  int LESS_THAN_EQUAL = 25;
  int EQUAL = 26;
  int GREATER_THAN = 27;
  int GREATER_THAN_EQUAL = 28;
  int FOLLOWS_OPERATOR = 29;
  int PIPE = 30;
  int STRING_LITERAL = 31;
  int ESCAPE_QUOT = 32;
  int ESCAPE_APOS = 33;
  int KEYWORD_ANCESTOR = 34;
  int KEYWORD_ANCESTOR_OR_SELF = 35;
  int KEYWORD_AND = 36;
  int KEYWORD_AS = 37;
  int KEYWORD_ATTRIBUTE = 38;
  int KEYWORD_CAST = 39;
  int KEYWORD_CASTABLE = 40;
  int KEYWORD_CHILD = 41;
  int KEYWORD_COMMENT = 42;
  int KEYWORD_DESCENDANT = 43;
  int KEYWORD_DESCENDANT_OR_SELF = 44;
  int KEYWORD_DIV = 45;
  int KEYWORD_DOCUMENT_NODE = 46;
  int KEYWORD_ELEMENT = 47;
  int KEYWORD_ELSE = 48;
  int KEYWORD_EMPTY_SEQUENCE = 49;
  int KEYWORD_EQ = 50;
  int KEYWORD_EVERY = 51;
  int KEYWORD_EXCEPT = 52;
  int KEYWORD_EXTERNAL = 53;
  int KEYWORD_FOLLOWING = 54;
  int KEYWORD_FOLLOWING_SIBLING = 55;
  int KEYWORD_FOR = 56;
  int KEYWORD_GE = 57;
  int KEYWORD_GT = 58;
  int KEYWORD_IDIV = 59;
  int KEYWORD_IF = 60;
  int KEYWORD_IN = 61;
  int KEYWORD_INSTANCE = 62;
  int KEYWORD_INTERSECT = 63;
  int KEYWORD_IS = 64;
  int KEYWORD_ITEM = 65;
  int KEYWORD_LE = 66;
  int KEYWORD_LT = 67;
  int KEYWORD_MOD = 68;
  int KEYWORD_NAMESPACE = 69;
  int KEYWORD_NE = 70;
  int KEYWORD_NODE = 71;
  int KEYWORD_OF = 72;
  int KEYWORD_OR = 73;
  int KEYWORD_PARENT = 74;
  int KEYWORD_PRECEDING = 75;
  int KEYWORD_PRECEDING_SIBLIING = 76;
  int KEYWORD_PROCESSING_INSTRUCTION = 77;
  int KEYWORD_RETURN = 78;
  int KEYWORD_SATISFIES = 79;
  int KEYWORD_SCHEMA_ATTRIBUTE = 80;
  int KEYWORD_SCHEMA_ELEMENT = 81;
  int KEYWORD_SELF = 82;
  int KEYWORD_SOME = 83;
  int KEYWORD_TEXT = 84;
  int KEYWORD_THEN = 85;
  int KEYWORD_TO = 86;
  int KEYWORD_TREAT = 87;
  int KEYWORD_UNION = 88;
  int INTEGER_LITERAL = 89;
  int DECIMAL_LITERAL = 90;
  int DOUBLE_LITERAL = 91;
  int DIGITS = 92;
  int QNAME = 93;
  int NCNAME = 94;
  int NCNAMECHAR = 95;
  int NCNAMESTARTCHAR = 96;
  int NAMECHAR = 97;
  int LETTER = 98;
  int BASECHAR = 99;
  int IDEOGRAPHIC = 100;
  int COMBININGCHAR = 101;
  int DIGIT = 102;
  int EXTENDER = 103;
  int CHAR = 104;
  int COMMENT = 105;
  int COMMENT_START = 106;
  int COMMENT_CONTENTS = 107;
  int COMMENT_END = 108;

  int DEFAULT = 0;
  int DELIMITING = 1;
  int INSIDE_COMMENT = 2;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"-\"",
    "\",\"",
    "\":\"",
    "\"::\"",
    "\"!=\"",
    "\"?\"",
    "\"/\"",
    "\"//\"",
    "\".\"",
    "\"..\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\"$\"",
    "\"*\"",
    "\"+\"",
    "\"<\"",
    "\"<<\"",
    "\"<=\"",
    "\"=\"",
    "\">\"",
    "\">=\"",
    "\">>\"",
    "\"|\"",
    "<STRING_LITERAL>",
    "\"\\\"\\\"\"",
    "\"\\\'\\\'\"",
    "\"ancestor\"",
    "\"ancestor-or-self\"",
    "\"and\"",
    "\"as\"",
    "\"attribute\"",
    "\"cast\"",
    "\"castable\"",
    "\"child\"",
    "\"comment\"",
    "\"descendant\"",
    "\"descendant-or-self\"",
    "\"div\"",
    "\"document-node\"",
    "\"element\"",
    "\"else\"",
    "\"empty-sequence\"",
    "\"eq\"",
    "\"every\"",
    "\"except\"",
    "\"external\"",
    "\"following\"",
    "\"following-sibling\"",
    "\"for\"",
    "\"ge\"",
    "\"gt\"",
    "\"idiv\"",
    "\"if\"",
    "\"in\"",
    "\"instance\"",
    "\"intersect\"",
    "\"is\"",
    "\"item\"",
    "\"le\"",
    "\"lt\"",
    "\"mod\"",
    "\"namespace\"",
    "\"ne\"",
    "\"node\"",
    "\"of\"",
    "\"or\"",
    "\"parent\"",
    "\"preceding\"",
    "\"preceding-sibling\"",
    "\"processing-instruction\"",
    "\"return\"",
    "\"satisfies\"",
    "\"schema-attribute\"",
    "\"schema-element\"",
    "\"self\"",
    "\"some\"",
    "\"text\"",
    "\"then\"",
    "\"to\"",
    "\"treat\"",
    "\"union\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<DOUBLE_LITERAL>",
    "<DIGITS>",
    "<QNAME>",
    "<NCNAME>",
    "<NCNAMECHAR>",
    "<NCNAMESTARTCHAR>",
    "<NAMECHAR>",
    "<LETTER>",
    "<BASECHAR>",
    "<IDEOGRAPHIC>",
    "<COMBININGCHAR>",
    "<DIGIT>",
    "<EXTENDER>",
    "<CHAR>",
    "<COMMENT>",
    "\"(:\"",
    "<COMMENT_CONTENTS>",
    "\":)\"",
  };

}

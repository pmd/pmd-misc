/* Generated By:JJTree&JavaCC: Do not edit this line. XPath2Parser.java */
package net.sourceforge.pmd.jerry.ast.xpath;

import java.util.Stack;

import net.sourceforge.pmd.jerry.xpath.AxisEnum;
import net.sourceforge.pmd.jerry.xpath.OperatorEnum;

public class XPath2Parser/*@bgen(jjtree)*/implements XPath2ParserTreeConstants, XPath2ParserConstants {/*@bgen(jjtree)*/
  protected JJTXPath2ParserState jjtree = new JJTXPath2ParserState();

/**
 * XPath 2.0 grammar follows
 */

// [1] http://www.w3.org/TR/xpath20/#doc-xpath-XPath
  final public ASTXPath XPath() throws ParseException {
 /*@bgen(jjtree) XPath */
  ASTXPath jjtn000 = new ASTXPath(this, JJTXPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                // Check for unterminated comment
                if (XPath2ParserConstants.INSIDE_COMMENT == this.token_source.curLexState)
                {
                        {if (true) throw new ParseException("Unterminated comment.");}
                }
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new RuntimeException("Missing return statement in function");
  }

// [2] http://www.w3.org/TR/xpath20/#prod-xpath-Expr
  final public void Expr() throws ParseException {
 /*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExprSingle();
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        ExprSingle();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [3] http://www.w3.org/TR/xpath20/#doc-xpath-ExprSingle
  final public void ExprSingle() throws ParseException {
 /*@bgen(jjtree) ExprSingle */
  ASTExprSingle jjtn000 = new ASTExprSingle(this, JJTEXPRSINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_FOR:
        ForExpr();
        break;
      case KEYWORD_EVERY:
      case KEYWORD_SOME:
        QuantifiedExpr();
        break;
      case KEYWORD_IF:
        IfExpr();
        break;
      case MINUS:
      case SLASH:
      case SLASH_SLASH:
      case DOT:
      case DOT_DOT:
      case OPEN_PAREN:
      case AT:
      case DOLLAR:
      case STAR:
      case PLUS:
      case STRING_LITERAL:
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_CHILD:
      case KEYWORD_COMMENT:
      case KEYWORD_DESCENDANT:
      case KEYWORD_DESCENDANT_OR_SELF:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_FOLLOWING:
      case KEYWORD_FOLLOWING_SIBLING:
      case KEYWORD_NAMESPACE:
      case KEYWORD_NODE:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_SELF:
      case KEYWORD_TEXT:
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
      case QNAME:
      case NCNAME:
        OrExpr();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [4] http://www.w3.org/TR/xpath20/#doc-xpath-ForExpr
  final public void ForExpr() throws ParseException {
 /*@bgen(jjtree) ForExpr */
  ASTForExpr jjtn000 = new ASTForExpr(this, JJTFOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleForClause();
      jj_consume_token(KEYWORD_RETURN);
      ExprSingle();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [5] http://www.w3.org/TR/xpath20/#prod-xpath-SimpleForClause
  final public void SimpleForClause() throws ParseException {
 /*@bgen(jjtree) SimpleForClause */
  ASTSimpleForClause jjtn000 = new ASTSimpleForClause(this, JJTSIMPLEFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_FOR);
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(KEYWORD_IN);
      ExprSingle();
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(KEYWORD_IN);
        ExprSingle();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [6] http://www.w3.org/TR/xpath20/#doc-xpath-QuantifiedExpr
  final public void QuantifiedExpr() throws ParseException {
 /*@bgen(jjtree) QuantifiedExpr */
  ASTQuantifiedExpr jjtn000 = new ASTQuantifiedExpr(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_SOME:
        jj_consume_token(KEYWORD_SOME);
                  jjtn000.setExistential(true);
        break;
      case KEYWORD_EVERY:
        jj_consume_token(KEYWORD_EVERY);
                                                              jjtn000.setExistential(false);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(KEYWORD_IN);
      ExprSingle();
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(KEYWORD_IN);
        ExprSingle();
      }
      jj_consume_token(KEYWORD_SATISFIES);
      ExprSingle();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [7] http://www.w3.org/TR/xpath20/#doc-xpath-IfExpr
  final public void IfExpr() throws ParseException {
 /*@bgen(jjtree) IfExpr */
  ASTIfExpr jjtn000 = new ASTIfExpr(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_IF);
      jj_consume_token(OPEN_PAREN);
      Expr();
      jj_consume_token(CLOSE_PARAN);
      jj_consume_token(KEYWORD_THEN);
      ExprSingle();
      jj_consume_token(KEYWORD_ELSE);
      ExprSingle();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [8] http://www.w3.org/TR/xpath20/#doc-xpath-OrExpr
  final public void OrExpr() throws ParseException {
 /*@bgen(jjtree) OrExpr */
  ASTOrExpr jjtn000 = new ASTOrExpr(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpr();
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case KEYWORD_OR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(KEYWORD_OR);
        AndExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [9] http://www.w3.org/TR/xpath20/#doc-xpath-AndExpr
  final public void AndExpr() throws ParseException {
 /*@bgen(jjtree) AndExpr */
  ASTAndExpr jjtn000 = new ASTAndExpr(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComparisonExpr();
      label_5:
      while (true) {
        switch (jj_nt.kind) {
        case KEYWORD_AND:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(KEYWORD_AND);
        ComparisonExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [10] http://www.w3.org/TR/xpath20/#doc-xpath-ComparisonExpr
  final public void ComparisonExpr() throws ParseException {
 /*@bgen(jjtree) ComparisonExpr */
  ASTComparisonExpr jjtn000 = new ASTComparisonExpr(this, JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RangeExpr();
      switch (jj_nt.kind) {
      case BANG_EQUAL:
      case LESS_THAN:
      case PRECEEDS_OPERATOR:
      case LESS_THAN_EQUAL:
      case EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_EQUAL:
      case FOLLOWS_OPERATOR:
      case KEYWORD_EQ:
      case KEYWORD_GE:
      case KEYWORD_GT:
      case KEYWORD_IS:
      case KEYWORD_LE:
      case KEYWORD_LT:
      case KEYWORD_NE:
        switch (jj_nt.kind) {
        case KEYWORD_EQ:
        case KEYWORD_GE:
        case KEYWORD_GT:
        case KEYWORD_LE:
        case KEYWORD_LT:
        case KEYWORD_NE:
          ValueComp(jjtn000);
          break;
        case BANG_EQUAL:
        case LESS_THAN:
        case LESS_THAN_EQUAL:
        case EQUAL:
        case GREATER_THAN:
        case GREATER_THAN_EQUAL:
          GeneralComp(jjtn000);
          break;
        case PRECEEDS_OPERATOR:
        case FOLLOWS_OPERATOR:
        case KEYWORD_IS:
          NodeComp(jjtn000);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RangeExpr();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [11] http://www.w3.org/TR/xpath20/#doc-xpath-RangeExpr
  final public void RangeExpr() throws ParseException {
 /*@bgen(jjtree) RangeExpr */
  ASTRangeExpr jjtn000 = new ASTRangeExpr(this, JJTRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpr();
      switch (jj_nt.kind) {
      case KEYWORD_TO:
        jj_consume_token(KEYWORD_TO);
        AdditiveExpr();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [12] http://www.w3.org/TR/xpath20/#doc-xpath-AdditiveExpr
  final public void AdditiveExpr() throws ParseException {
 /*@bgen(jjtree) AdditiveExpr */
  ASTAdditiveExpr jjtn000 = new ASTAdditiveExpr(this, JJTADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpr();
      label_6:
      while (true) {
        switch (jj_nt.kind) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        switch (jj_nt.kind) {
        case PLUS:
          jj_consume_token(PLUS);
                                      jjtn000.addOperator(OperatorEnum.ADDITION);
          break;
        case MINUS:
          jj_consume_token(MINUS);
                                      jjtn000.addOperator(OperatorEnum.SUBTRACTION);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [13] http://www.w3.org/TR/xpath20/#doc-xpath-MultiplicativeExpr
  final public void MultiplicativeExpr() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpr */
  ASTMultiplicativeExpr jjtn000 = new ASTMultiplicativeExpr(this, JJTMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnionExpr();
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case STAR:
        case KEYWORD_DIV:
        case KEYWORD_IDIV:
        case KEYWORD_MOD:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch (jj_nt.kind) {
        case STAR:
          jj_consume_token(STAR);
                                      jjtn000.addOperator(OperatorEnum.MULTIPLICATION);
          break;
        case KEYWORD_DIV:
          jj_consume_token(KEYWORD_DIV);
                                        jjtn000.addOperator(OperatorEnum.DIVISION);
          break;
        case KEYWORD_IDIV:
          jj_consume_token(KEYWORD_IDIV);
                                         jjtn000.addOperator(OperatorEnum.INTEGER_DIVISION);
          break;
        case KEYWORD_MOD:
          jj_consume_token(KEYWORD_MOD);
                                        jjtn000.addOperator(OperatorEnum.MODULUS);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnionExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [14] http://www.w3.org/TR/xpath20/#doc-xpath-UnionExpr
  final public void UnionExpr() throws ParseException {
 /*@bgen(jjtree) UnionExpr */
  ASTUnionExpr jjtn000 = new ASTUnionExpr(this, JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IntersectExceptExpr();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case PIPE:
        case KEYWORD_UNION:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch (jj_nt.kind) {
        case KEYWORD_UNION:
          jj_consume_token(KEYWORD_UNION);
                                          jjtn000.addOperator(OperatorEnum.SEQUENCE_UNION);
          break;
        case PIPE:
          jj_consume_token(PIPE);
                                      jjtn000.addOperator(OperatorEnum.SEQUENCE_UNION);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        IntersectExceptExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [15] http://www.w3.org/TR/xpath20/#doc-xpath-IntersectExceptExpr
  final public void IntersectExceptExpr() throws ParseException {
 /*@bgen(jjtree) IntersectExceptExpr */
  ASTIntersectExceptExpr jjtn000 = new ASTIntersectExceptExpr(this, JJTINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceofExpr();
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case KEYWORD_EXCEPT:
        case KEYWORD_INTERSECT:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        switch (jj_nt.kind) {
        case KEYWORD_INTERSECT:
          jj_consume_token(KEYWORD_INTERSECT);
                                              jjtn000.addOperator(OperatorEnum.SEQUENCE_INTERSECT);
          break;
        case KEYWORD_EXCEPT:
          jj_consume_token(KEYWORD_EXCEPT);
                                           jjtn000.addOperator(OperatorEnum.SEQUENCE_EXCEPT);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceofExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [16] http://www.w3.org/TR/xpath20/#doc-xpath-InstanceofExpr
  final public void InstanceofExpr() throws ParseException {
 /*@bgen(jjtree) InstanceofExpr */
  ASTInstanceofExpr jjtn000 = new ASTInstanceofExpr(this, JJTINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TreatExpr();
      switch (jj_nt.kind) {
      case KEYWORD_INSTANCE:
        jj_consume_token(KEYWORD_INSTANCE);
        jj_consume_token(KEYWORD_OF);
        SequenceType();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [17] http://www.w3.org/TR/xpath20/#doc-xpath-TreatExpr
  final public void TreatExpr() throws ParseException {
 /*@bgen(jjtree) TreatExpr */
  ASTTreatExpr jjtn000 = new ASTTreatExpr(this, JJTTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastableExpr();
      switch (jj_nt.kind) {
      case KEYWORD_TREAT:
        jj_consume_token(KEYWORD_TREAT);
        jj_consume_token(KEYWORD_AS);
        SequenceType();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [18] http://www.w3.org/TR/xpath20/#doc-xpath-CastableExpr
  final public void CastableExpr() throws ParseException {
 /*@bgen(jjtree) CastableExpr */
  ASTCastableExpr jjtn000 = new ASTCastableExpr(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpr();
      switch (jj_nt.kind) {
      case KEYWORD_CASTABLE:
        jj_consume_token(KEYWORD_CASTABLE);
        jj_consume_token(KEYWORD_AS);
        SingleType();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [19] http://www.w3.org/TR/xpath20/#doc-xpath-CastExpr
  final public void CastExpr() throws ParseException {
 /*@bgen(jjtree) CastExpr */
  ASTCastExpr jjtn000 = new ASTCastExpr(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpr();
      switch (jj_nt.kind) {
      case KEYWORD_CAST:
        jj_consume_token(KEYWORD_CAST);
        jj_consume_token(KEYWORD_AS);
        SingleType();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [20] http://www.w3.org/TR/xpath20/#doc-xpath-UnaryExpr
  final public void UnaryExpr() throws ParseException {
 /*@bgen(jjtree) UnaryExpr */
  ASTUnaryExpr jjtn000 = new ASTUnaryExpr(this, JJTUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        switch (jj_nt.kind) {
        case MINUS:
          jj_consume_token(MINUS);
                              jjtn000.addOperator(OperatorEnum.UNARY_MINUS);
          break;
        case PLUS:
          jj_consume_token(PLUS);
                              jjtn000.addOperator(OperatorEnum.UNARY_PLUS);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ValueExpr();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [21] http://www.w3.org/TR/xpath20/#doc-xpath-ValueExpr
  final public void ValueExpr() throws ParseException {
 /*@bgen(jjtree) ValueExpr */
  ASTValueExpr jjtn000 = new ASTValueExpr(this, JJTVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PathExpr();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [22] http://www.w3.org/TR/xpath20/#doc-xpath-GeneralComp
  final public void GeneralComp(ASTComparisonExpr parent) throws ParseException {
 /*@bgen(jjtree) GeneralComp */
  ASTGeneralComp jjtn000 = new ASTGeneralComp(this, JJTGENERALCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case EQUAL:
        jj_consume_token(EQUAL);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      parent.addOperator(OperatorEnum.GENERAL_COMPARISION_EQUAL);
        break;
      case BANG_EQUAL:
        jj_consume_token(BANG_EQUAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.GENERAL_COMPARISION_NOT_EQUAL);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      parent.addOperator(OperatorEnum.GENERAL_COMPARISION_LESSER_THAN);
        break;
      case LESS_THAN_EQUAL:
        jj_consume_token(LESS_THAN_EQUAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.GENERAL_COMPARISION_LESSER_THAN_OR_EQUAL);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      parent.addOperator(OperatorEnum.GENERAL_COMPARISION_GREATER_THAN);
        break;
      case GREATER_THAN_EQUAL:
        jj_consume_token(GREATER_THAN_EQUAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.GENERAL_COMPARISION_GREATER_THAN_OR_EQUAL);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [23] http://www.w3.org/TR/xpath20/#doc-xpath-ValueComp
  final public void ValueComp(ASTComparisonExpr parent) throws ParseException {
 /*@bgen(jjtree) ValueComp */
  ASTValueComp jjtn000 = new ASTValueComp(this, JJTVALUECOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_EQ:
        jj_consume_token(KEYWORD_EQ);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_EQUAL);
        break;
      case KEYWORD_NE:
        jj_consume_token(KEYWORD_NE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_NOT_EQUAL);
        break;
      case KEYWORD_LT:
        jj_consume_token(KEYWORD_LT);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_LESSER_THAN);
        break;
      case KEYWORD_LE:
        jj_consume_token(KEYWORD_LE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_LESSER_THAN_OR_EQUAL);
        break;
      case KEYWORD_GT:
        jj_consume_token(KEYWORD_GT);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_GREATER_THAN);
        break;
      case KEYWORD_GE:
        jj_consume_token(KEYWORD_GE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.VALUE_COMPARISION_GREATER_THAN_OR_EQUAL);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [24] http://www.w3.org/TR/xpath20/#doc-xpath-NodeComp
  final public void NodeComp(ASTComparisonExpr parent) throws ParseException {
 /*@bgen(jjtree) NodeComp */
  ASTNodeComp jjtn000 = new ASTNodeComp(this, JJTNODECOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_IS:
        jj_consume_token(KEYWORD_IS);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.NODE_COMPARISION_IS);
        break;
      case PRECEEDS_OPERATOR:
        jj_consume_token(PRECEEDS_OPERATOR);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.NODE_COMPARISION_PRECEEDS);
        break;
      case FOLLOWS_OPERATOR:
        jj_consume_token(FOLLOWS_OPERATOR);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       parent.addOperator(OperatorEnum.NODE_COMPARISION_FOLLOWS);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [25] http://www.w3.org/TR/xpath20/#doc-xpath-PathExpr
  final public void PathExpr() throws ParseException {
 /*@bgen(jjtree) PathExpr */
  ASTPathExpr jjtn000 = new ASTPathExpr(this, JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case SLASH:
        jj_consume_token(SLASH);
                       jjtn000.setRoot(true);
        if (jj_2_1(2)) {
          RelativePathExpr();
        } else {
          ;
        }
        break;
      case SLASH_SLASH:
        jj_consume_token(SLASH_SLASH);
                        jjtn000.setRoot(true); jjtn000.addAxis(AxisEnum.DESCENDANT_OR_SELF);
        RelativePathExpr();
        break;
      case DOT:
      case DOT_DOT:
      case OPEN_PAREN:
      case AT:
      case DOLLAR:
      case STAR:
      case STRING_LITERAL:
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_CHILD:
      case KEYWORD_COMMENT:
      case KEYWORD_DESCENDANT:
      case KEYWORD_DESCENDANT_OR_SELF:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_FOLLOWING:
      case KEYWORD_FOLLOWING_SIBLING:
      case KEYWORD_NAMESPACE:
      case KEYWORD_NODE:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_SELF:
      case KEYWORD_TEXT:
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
      case QNAME:
      case NCNAME:
        RelativePathExpr();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [26] http://www.w3.org/TR/xpath20/#doc-xpath-RelativePathExpr
  final public void RelativePathExpr() throws ParseException {
 /*@bgen(jjtree) RelativePathExpr */
  ASTRelativePathExpr jjtn000 = new ASTRelativePathExpr(this, JJTRELATIVEPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StepExpr();
      label_11:
      while (true) {
        switch (jj_nt.kind) {
        case SLASH:
        case SLASH_SLASH:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
        switch (jj_nt.kind) {
        case SLASH:
          jj_consume_token(SLASH);
                                      jjtn000.addAxis(null);
          break;
        case SLASH_SLASH:
          jj_consume_token(SLASH_SLASH);
                                       jjtn000.addAxis(AxisEnum.DESCENDANT_OR_SELF);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        StepExpr();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [27] http://www.w3.org/TR/xpath20/#doc-xpath-StepExpr
  final public void StepExpr() throws ParseException {
 /*@bgen(jjtree) StepExpr */
  ASTStepExpr jjtn000 = new ASTStepExpr(this, JJTSTEPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        FilterExpr();
      } else {
        switch (jj_nt.kind) {
        case DOT_DOT:
        case AT:
        case STAR:
        case KEYWORD_ANCESTOR:
        case KEYWORD_ANCESTOR_OR_SELF:
        case KEYWORD_ATTRIBUTE:
        case KEYWORD_CHILD:
        case KEYWORD_COMMENT:
        case KEYWORD_DESCENDANT:
        case KEYWORD_DESCENDANT_OR_SELF:
        case KEYWORD_DOCUMENT_NODE:
        case KEYWORD_ELEMENT:
        case KEYWORD_FOLLOWING:
        case KEYWORD_FOLLOWING_SIBLING:
        case KEYWORD_NAMESPACE:
        case KEYWORD_NODE:
        case KEYWORD_PARENT:
        case KEYWORD_PRECEDING:
        case KEYWORD_PRECEDING_SIBLIING:
        case KEYWORD_PROCESSING_INSTRUCTION:
        case KEYWORD_SCHEMA_ATTRIBUTE:
        case KEYWORD_SCHEMA_ELEMENT:
        case KEYWORD_SELF:
        case KEYWORD_TEXT:
        case QNAME:
        case NCNAME:
          AxisStep();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [28] http://www.w3.org/TR/xpath20/#doc-xpath-AxisStep
  final public void AxisStep() throws ParseException {
 /*@bgen(jjtree) AxisStep */
  ASTAxisStep jjtn000 = new ASTAxisStep(this, JJTAXISSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case DOT_DOT:
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
        ReverseStep();
        break;
      case AT:
      case STAR:
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_CHILD:
      case KEYWORD_COMMENT:
      case KEYWORD_DESCENDANT:
      case KEYWORD_DESCENDANT_OR_SELF:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_FOLLOWING:
      case KEYWORD_FOLLOWING_SIBLING:
      case KEYWORD_NAMESPACE:
      case KEYWORD_NODE:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_SELF:
      case KEYWORD_TEXT:
      case QNAME:
      case NCNAME:
        ForwardStep();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PredicateList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [29] http://www.w3.org/TR/xpath20/#doc-xpath-ForwardStep
  final public void ForwardStep() throws ParseException {
 /*@bgen(jjtree) ForwardStep */
  ASTForwardStep jjtn000 = new ASTForwardStep(this, JJTFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(2)) {
        ForwardAxis();
        NodeTest();
      } else {
        switch (jj_nt.kind) {
        case AT:
        case STAR:
        case KEYWORD_ATTRIBUTE:
        case KEYWORD_COMMENT:
        case KEYWORD_DOCUMENT_NODE:
        case KEYWORD_ELEMENT:
        case KEYWORD_NODE:
        case KEYWORD_PROCESSING_INSTRUCTION:
        case KEYWORD_SCHEMA_ATTRIBUTE:
        case KEYWORD_SCHEMA_ELEMENT:
        case KEYWORD_TEXT:
        case QNAME:
        case NCNAME:
          AbbrevForwardStep();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [30] http://www.w3.org/TR/xpath20/#doc-xpath-ForwardAxis
  final public void ForwardAxis() throws ParseException {
 /*@bgen(jjtree) ForwardAxis */
  ASTForwardAxis jjtn000 = new ASTForwardAxis(this, JJTFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_CHILD:
        jj_consume_token(KEYWORD_CHILD);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_DESCENDANT:
        jj_consume_token(KEYWORD_DESCENDANT);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_ATTRIBUTE:
        jj_consume_token(KEYWORD_ATTRIBUTE);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_SELF:
        jj_consume_token(KEYWORD_SELF);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_DESCENDANT_OR_SELF:
        jj_consume_token(KEYWORD_DESCENDANT_OR_SELF);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_FOLLOWING_SIBLING:
        jj_consume_token(KEYWORD_FOLLOWING_SIBLING);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_FOLLOWING:
        jj_consume_token(KEYWORD_FOLLOWING);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_NAMESPACE:
        jj_consume_token(KEYWORD_NAMESPACE);
        jj_consume_token(COLON_COLON);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [31] http://www.w3.org/TR/xpath20/#doc-xpath-AbbrevForwardStep
  final public void AbbrevForwardStep() throws ParseException {
 /*@bgen(jjtree) AbbrevForwardStep */
  ASTAbbrevForwardStep jjtn000 = new ASTAbbrevForwardStep(this, JJTABBREVFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case AT:
        jj_consume_token(AT);
               jjtn000.addAxis(AxisEnum.ATTRIBUTE);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      NodeTest();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [32] http://www.w3.org/TR/xpath20/#doc-xpath-ReverseStep
  final public void ReverseStep() throws ParseException {
 /*@bgen(jjtree) ReverseStep */
  ASTReverseStep jjtn000 = new ASTReverseStep(this, JJTREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
        ReverseAxis();
        NodeTest();
        break;
      case DOT_DOT:
        AbbrevReverseStep();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [33] http://www.w3.org/TR/xpath20/#doc-xpath-ReverseAxis
  final public void ReverseAxis() throws ParseException {
 /*@bgen(jjtree) ReverseAxis */
  ASTReverseAxis jjtn000 = new ASTReverseAxis(this, JJTREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_PARENT:
        jj_consume_token(KEYWORD_PARENT);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_ANCESTOR:
        jj_consume_token(KEYWORD_ANCESTOR);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_PRECEDING_SIBLIING:
        jj_consume_token(KEYWORD_PRECEDING_SIBLIING);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_PRECEDING:
        jj_consume_token(KEYWORD_PRECEDING);
        jj_consume_token(COLON_COLON);
        break;
      case KEYWORD_ANCESTOR_OR_SELF:
        jj_consume_token(KEYWORD_ANCESTOR_OR_SELF);
        jj_consume_token(COLON_COLON);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [34] http://www.w3.org/TR/xpath20/#doc-xpath-AbbrevReverseStep
  final public void AbbrevReverseStep() throws ParseException {
 /*@bgen(jjtree) AbbrevReverseStep */
  ASTAbbrevReverseStep jjtn000 = new ASTAbbrevReverseStep(this, JJTABBREVREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT_DOT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [35] http://www.w3.org/TR/xpath20/#doc-xpath-NodeTest
  final public void NodeTest() throws ParseException {
 /*@bgen(jjtree) NodeTest */
  ASTNodeTest jjtn000 = new ASTNodeTest(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_COMMENT:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_NODE:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_TEXT:
        KindTest();
        break;
      case STAR:
      case QNAME:
      case NCNAME:
        NameTest();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [36] http://www.w3.org/TR/xpath20/#doc-xpath-NameTest
  final public void NameTest() throws ParseException {
 /*@bgen(jjtree) NameTest */
  ASTNameTest jjtn000 = new ASTNameTest(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case QNAME:
          Token token;
        token = jj_consume_token(QNAME);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.setImage(token.image);
        break;
      case STAR:
      case NCNAME:
        Wildcard();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [37] http://www.w3.org/TR/xpath20/#doc-xpath-Wildcard
  final public void Wildcard() throws ParseException {
 /*@bgen(jjtree) Wildcard */
  ASTWildcard jjtn000 = new ASTWildcard(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        jj_consume_token(STAR);
      } else {
        switch (jj_nt.kind) {
        case NCNAME:
                  Token token;
          token = jj_consume_token(NCNAME);
                                    jjtn000.setImage(token.image); jjtn000.setPrefix(true);
          jj_consume_token(COLON);
          jj_consume_token(STAR);
          break;
        case STAR:
          jj_consume_token(STAR);
          jj_consume_token(COLON);
          token = jj_consume_token(NCNAME);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            jjtn000.setImage(token.image); jjtn000.setPrefix(false);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [38] http://www.w3.org/TR/xpath20/#doc-xpath-FilterExpr
  final public void FilterExpr() throws ParseException {
 /*@bgen(jjtree) FilterExpr */
  ASTFilterExpr jjtn000 = new ASTFilterExpr(this, JJTFILTEREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpr();
      PredicateList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [39] http://www.w3.org/TR/xpath20/#doc-xpath-PredicateList
  final public void PredicateList() throws ParseException {
 /*@bgen(jjtree) PredicateList */
  ASTPredicateList jjtn000 = new ASTPredicateList(this, JJTPREDICATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case OPEN_BRACKET:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_12;
        }
        Predicate();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [40] http://www.w3.org/TR/xpath20/#doc-xpath-Predicate
  final public void Predicate() throws ParseException {
 /*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(this, JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_BRACKET);
      Expr();
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [41] http://www.w3.org/TR/xpath20/#doc-xpath-PrimaryExpr
  final public void PrimaryExpr() throws ParseException {
 /*@bgen(jjtree) PrimaryExpr */
  ASTPrimaryExpr jjtn000 = new ASTPrimaryExpr(this, JJTPRIMARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING_LITERAL:
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
        Literal();
        break;
      case DOLLAR:
        VarRef();
        break;
      case OPEN_PAREN:
        ParenthesizedExpr();
        break;
      case DOT:
        ContextItemExpr();
        break;
      case QNAME:
        FunctionCall();
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [42] http://www.w3.org/TR/xpath20/#doc-xpath-Literal
  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
        NumericLiteral();
        break;
      case STRING_LITERAL:
        StringLiteral();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [43] http://www.w3.org/TR/xpath20/#doc-xpath-NumericLiteral
  final public void NumericLiteral() throws ParseException {
 /*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(this, JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
        IntegerLiteral();
        break;
      case DECIMAL_LITERAL:
        DecimalLiteral();
        break;
      case DOUBLE_LITERAL:
        DoubleLiteral();
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [44] http://www.w3.org/TR/xpath20/#doc-xpath-VarRef
  final public void VarRef() throws ParseException {
 /*@bgen(jjtree) VarRef */
  ASTVarRef jjtn000 = new ASTVarRef(this, JJTVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLLAR);
      VarName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [45] http://www.w3.org/TR/xpath20/#doc-xpath-VarName
  final public void VarName() throws ParseException {
 /*@bgen(jjtree) VarName */
  ASTVarName jjtn000 = new ASTVarName(this, JJTVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [46] http://www.w3.org/TR/xpath20/#doc-xpath-ParenthesizedExpr
  final public void ParenthesizedExpr() throws ParseException {
 /*@bgen(jjtree) ParenthesizedExpr */
  ASTParenthesizedExpr jjtn000 = new ASTParenthesizedExpr(this, JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case MINUS:
      case SLASH:
      case SLASH_SLASH:
      case DOT:
      case DOT_DOT:
      case OPEN_PAREN:
      case AT:
      case DOLLAR:
      case STAR:
      case PLUS:
      case STRING_LITERAL:
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_CHILD:
      case KEYWORD_COMMENT:
      case KEYWORD_DESCENDANT:
      case KEYWORD_DESCENDANT_OR_SELF:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_EVERY:
      case KEYWORD_FOLLOWING:
      case KEYWORD_FOLLOWING_SIBLING:
      case KEYWORD_FOR:
      case KEYWORD_IF:
      case KEYWORD_NAMESPACE:
      case KEYWORD_NODE:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_SELF:
      case KEYWORD_SOME:
      case KEYWORD_TEXT:
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
      case QNAME:
      case NCNAME:
        Expr();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [47] http://www.w3.org/TR/xpath20/#doc-xpath-ContextItemExpr
  final public void ContextItemExpr() throws ParseException {
 /*@bgen(jjtree) ContextItemExpr */
  ASTContextItemExpr jjtn000 = new ASTContextItemExpr(this, JJTCONTEXTITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [48] http://www.w3.org/TR/xpath20/#doc-xpath-FunctionCall
  final public void FunctionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtn000.setImage(token.image);
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case MINUS:
      case SLASH:
      case SLASH_SLASH:
      case DOT:
      case DOT_DOT:
      case OPEN_PAREN:
      case AT:
      case DOLLAR:
      case STAR:
      case PLUS:
      case STRING_LITERAL:
      case KEYWORD_ANCESTOR:
      case KEYWORD_ANCESTOR_OR_SELF:
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_CHILD:
      case KEYWORD_COMMENT:
      case KEYWORD_DESCENDANT:
      case KEYWORD_DESCENDANT_OR_SELF:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_EVERY:
      case KEYWORD_FOLLOWING:
      case KEYWORD_FOLLOWING_SIBLING:
      case KEYWORD_FOR:
      case KEYWORD_IF:
      case KEYWORD_NAMESPACE:
      case KEYWORD_NODE:
      case KEYWORD_PARENT:
      case KEYWORD_PRECEDING:
      case KEYWORD_PRECEDING_SIBLIING:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_SELF:
      case KEYWORD_SOME:
      case KEYWORD_TEXT:
      case INTEGER_LITERAL:
      case DECIMAL_LITERAL:
      case DOUBLE_LITERAL:
      case QNAME:
      case NCNAME:
        ExprSingle();
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          ExprSingle();
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [49] http://www.w3.org/TR/xpath20/#doc-xpath-SingleType
  final public void SingleType() throws ParseException {
 /*@bgen(jjtree) SingleType */
  ASTSingleType jjtn000 = new ASTSingleType(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      AtomicType();
      switch (jj_nt.kind) {
      case QUESTION_MARK:
        token = jj_consume_token(QUESTION_MARK);
                                    jjtn000.setImage(token.image);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [50] http://www.w3.org/TR/xpath20/#doc-xpath-SequenceType
  final public void SequenceType() throws ParseException {
 /*@bgen(jjtree) SequenceType */
  ASTSequenceType jjtn000 = new ASTSequenceType(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_EMPTY_SEQUENCE:
        jj_consume_token(KEYWORD_EMPTY_SEQUENCE);
        jj_consume_token(OPEN_PAREN);
        jj_consume_token(CLOSE_PARAN);
        break;
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_COMMENT:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_ITEM:
      case KEYWORD_NODE:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_TEXT:
      case QNAME:
        ItemType();
        if (jj_2_5(2)) {
          OccurrenceIndicator();
        } else {
          ;
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [51] http://www.w3.org/TR/xpath20/#doc-xpath-OccurrenceIndicator
  final public void OccurrenceIndicator() throws ParseException {
 /*@bgen(jjtree) OccurrenceIndicator */
  ASTOccurrenceIndicator jjtn000 = new ASTOccurrenceIndicator(this, JJTOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case QUESTION_MARK:
        jj_consume_token(QUESTION_MARK);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [52] http://www.w3.org/TR/xpath20/#doc-xpath-ItemType
  final public void ItemType() throws ParseException {
 /*@bgen(jjtree) ItemType */
  ASTItemType jjtn000 = new ASTItemType(this, JJTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_ATTRIBUTE:
      case KEYWORD_COMMENT:
      case KEYWORD_DOCUMENT_NODE:
      case KEYWORD_ELEMENT:
      case KEYWORD_NODE:
      case KEYWORD_PROCESSING_INSTRUCTION:
      case KEYWORD_SCHEMA_ATTRIBUTE:
      case KEYWORD_SCHEMA_ELEMENT:
      case KEYWORD_TEXT:
        KindTest();
        break;
      case KEYWORD_ITEM:
        jj_consume_token(KEYWORD_ITEM);
        jj_consume_token(OPEN_PAREN);
        jj_consume_token(CLOSE_PARAN);
        break;
      case QNAME:
        AtomicType();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [53] http://www.w3.org/TR/xpath20/#doc-xpath-AtomicType
  final public void AtomicType() throws ParseException {
 /*@bgen(jjtree) AtomicType */
  ASTAtomicType jjtn000 = new ASTAtomicType(this, JJTATOMICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [54] http://www.w3.org/TR/xpath20/#doc-xpath-KindTest
  final public void KindTest() throws ParseException {
 /*@bgen(jjtree) KindTest */
  ASTKindTest jjtn000 = new ASTKindTest(this, JJTKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case KEYWORD_DOCUMENT_NODE:
        DocumentTest();
        break;
      case KEYWORD_ELEMENT:
        ElementTest();
        break;
      case KEYWORD_ATTRIBUTE:
        AttributeTest();
        break;
      case KEYWORD_SCHEMA_ELEMENT:
        SchemaElementTest();
        break;
      case KEYWORD_SCHEMA_ATTRIBUTE:
        SchemaAttributeTest();
        break;
      case KEYWORD_PROCESSING_INSTRUCTION:
        PITest();
        break;
      case KEYWORD_COMMENT:
        CommentTest();
        break;
      case KEYWORD_TEXT:
        TextTest();
        break;
      case KEYWORD_NODE:
        AnyKindTest();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [55] http://www.w3.org/TR/xpath20/#doc-xpath-AnyKindTest
  final public void AnyKindTest() throws ParseException {
 /*@bgen(jjtree) AnyKindTest */
  ASTAnyKindTest jjtn000 = new ASTAnyKindTest(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_NODE);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(CLOSE_PARAN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [56] http://www.w3.org/TR/xpath20/#doc-xpath-DocumentTest
  final public void DocumentTest() throws ParseException {
 /*@bgen(jjtree) DocumentTest */
  ASTDocumentTest jjtn000 = new ASTDocumentTest(this, JJTDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_DOCUMENT_NODE);
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case KEYWORD_ELEMENT:
      case KEYWORD_SCHEMA_ELEMENT:
        switch (jj_nt.kind) {
        case KEYWORD_ELEMENT:
          ElementTest();
          break;
        case KEYWORD_SCHEMA_ELEMENT:
          SchemaElementTest();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [57] http://www.w3.org/TR/xpath20/#doc-xpath-TextTest
  final public void TextTest() throws ParseException {
 /*@bgen(jjtree) TextTest */
  ASTTextTest jjtn000 = new ASTTextTest(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_TEXT);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(CLOSE_PARAN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [58] http://www.w3.org/TR/xpath20/#doc-xpath-CommentTest
  final public void CommentTest() throws ParseException {
 /*@bgen(jjtree) CommentTest */
  ASTCommentTest jjtn000 = new ASTCommentTest(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_COMMENT);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(CLOSE_PARAN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [59] http://www.w3.org/TR/xpath20/#doc-xpath-PITest
  final public void PITest() throws ParseException {
 /*@bgen(jjtree) PITest */
  ASTPITest jjtn000 = new ASTPITest(this, JJTPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_PROCESSING_INSTRUCTION);
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
      case NCNAME:
        switch (jj_nt.kind) {
        case NCNAME:
          jj_consume_token(NCNAME);
          break;
        case STRING_LITERAL:
          StringLiteral();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [60] http://www.w3.org/TR/xpath20/#doc-xpath-AttributeTest
  final public void AttributeTest() throws ParseException {
 /*@bgen(jjtree) AttributeTest */
  ASTAttributeTest jjtn000 = new ASTAttributeTest(this, JJTATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_ATTRIBUTE);
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case STAR:
      case QNAME:
        AttribNameOrWildcard();
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          TypeName();
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [61] http://www.w3.org/TR/xpath20/#doc-xpath-AttribNameOrWildcard
  final public void AttribNameOrWildcard() throws ParseException {
 /*@bgen(jjtree) AttribNameOrWildcard */
  ASTAttribNameOrWildcard jjtn000 = new ASTAttribNameOrWildcard(this, JJTATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case QNAME:
        AttributeName();
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [62] http://www.w3.org/TR/xpath20/#doc-xpath-SchemaAttributeTest
  final public void SchemaAttributeTest() throws ParseException {
 /*@bgen(jjtree) SchemaAttributeTest */
  ASTSchemaAttributeTest jjtn000 = new ASTSchemaAttributeTest(this, JJTSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_SCHEMA_ATTRIBUTE);
      jj_consume_token(OPEN_PAREN);
      AttributeDeclaration();
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [63] http://www.w3.org/TR/xpath20/#doc-xpath-AttributeDeclaration
  final public void AttributeDeclaration() throws ParseException {
 /*@bgen(jjtree) AttributeDeclaration */
  ASTAttributeDeclaration jjtn000 = new ASTAttributeDeclaration(this, JJTATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [64] http://www.w3.org/TR/xpath20/#doc-xpath-ElementTest
  final public void ElementTest() throws ParseException {
 /*@bgen(jjtree) ElementTest */
  ASTElementTest jjtn000 = new ASTElementTest(this, JJTELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_ELEMENT);
      jj_consume_token(OPEN_PAREN);
      switch (jj_nt.kind) {
      case STAR:
      case QNAME:
        ElementNameOrWildcard();
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          TypeName();
          switch (jj_nt.kind) {
          case QUESTION_MARK:
            jj_consume_token(QUESTION_MARK);
            break;
          default:
            jj_la1[59] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [65] http://www.w3.org/TR/xpath20/#doc-xpath-ElementNameOrWildcard
  final public void ElementNameOrWildcard() throws ParseException {
 /*@bgen(jjtree) ElementNameOrWildcard */
  ASTElementNameOrWildcard jjtn000 = new ASTElementNameOrWildcard(this, JJTELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case QNAME:
        ElementName();
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

// [66] http://www.w3.org/TR/xpath20/#doc-xpath-SchemaElementTest
  final public void SchemaElementTest() throws ParseException {
 /*@bgen(jjtree) SchemaElementTest */
  ASTSchemaElementTest jjtn000 = new ASTSchemaElementTest(this, JJTSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEYWORD_SCHEMA_ELEMENT);
      jj_consume_token(OPEN_PAREN);
      ElementDeclaration();
      jj_consume_token(CLOSE_PARAN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [67] http://www.w3.org/TR/xpath20/#doc-xpath-ElementDeclaration
  final public void ElementDeclaration() throws ParseException {
 /*@bgen(jjtree) ElementDeclaration */
  ASTElementDeclaration jjtn000 = new ASTElementDeclaration(this, JJTELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [68] http://www.w3.org/TR/xpath20/#doc-xpath-AttributeName
  final public void AttributeName() throws ParseException {
 /*@bgen(jjtree) AttributeName */
  ASTAttributeName jjtn000 = new ASTAttributeName(this, JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [69] http://www.w3.org/TR/xpath20/#doc-xpath-ElementName
  final public void ElementName() throws ParseException {
 /*@bgen(jjtree) ElementName */
  ASTElementName jjtn000 = new ASTElementName(this, JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [70] http://www.w3.org/TR/xpath20/#doc-xpath-TypeName
  final public void TypeName() throws ParseException {
 /*@bgen(jjtree) TypeName */
  ASTTypeName jjtn000 = new ASTTypeName(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(QNAME);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [71] http://www.w3.org/TR/xpath20/#doc-xpath-IntegerLiteral
  final public void IntegerLiteral() throws ParseException {
 /*@bgen(jjtree) IntegerLiteral */
  ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(this, JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(INTEGER_LITERAL);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [72] http://www.w3.org/TR/xpath20/#doc-xpath-DecimalLiteral
  final public void DecimalLiteral() throws ParseException {
 /*@bgen(jjtree) DecimalLiteral */
  ASTDecimalLiteral jjtn000 = new ASTDecimalLiteral(this, JJTDECIMALLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(DECIMAL_LITERAL);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [73] http://www.w3.org/TR/xpath20/#doc-xpath-DoubleLiteral
  final public void DoubleLiteral() throws ParseException {
 /*@bgen(jjtree) DoubleLiteral */
  ASTDoubleLiteral jjtn000 = new ASTDoubleLiteral(this, JJTDOUBLELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(DOUBLE_LITERAL);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// [74] http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral
  final public void StringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(this, JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          Token token;
      token = jj_consume_token(STRING_LITERAL);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   jjtn000.setImage(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3R_98() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(QNAME)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(DOT_DOT)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(KEYWORD_ANCESTOR_OR_SELF)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(KEYWORD_PRECEDING)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(KEYWORD_PRECEDING_SIBLIING)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(KEYWORD_ANCESTOR)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(KEYWORD_PARENT)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(KEYWORD_NAMESPACE)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(KEYWORD_FOLLOWING)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(KEYWORD_FOLLOWING_SIBLING)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(KEYWORD_DESCENDANT_OR_SELF)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(KEYWORD_SELF)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(KEYWORD_ATTRIBUTE)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(KEYWORD_DESCENDANT)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(KEYWORD_CHILD)) return true;
    if (jj_scan_token(COLON_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(QNAME)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(KEYWORD_SCHEMA_ELEMENT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(SLASH_SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PARAN)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(QNAME)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(KEYWORD_ELEMENT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(KEYWORD_EVERY)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(KEYWORD_SCHEMA_ATTRIBUTE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(SLASH_SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(KEYWORD_ATTRIBUTE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(KEYWORD_PROCESSING_INSTRUCTION)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(KEYWORD_COMMENT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(KEYWORD_IF)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(KEYWORD_TEXT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(KEYWORD_SOME)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(KEYWORD_DOCUMENT_NODE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(KEYWORD_FOR)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(STAR)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(NCNAME)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(KEYWORD_NODE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_81()) return true;
    return false;
  }

  public XPath2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[63];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x8078f820,0x40,0x0,0x40,0x0,0x0,0x3f800200,0x3f800200,0x0,0x400020,0x400020,0x200000,0x200000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x400020,0x400020,0x1e800200,0x0,0x21000000,0x8038f800,0x1800,0x1800,0x284000,0x284000,0x280000,0x0,0x80000,0x4000,0x0,0x200000,0x200000,0x200000,0x20000,0x8010a000,0x80000000,0x0,0x8078f820,0x40,0x8078f820,0x400,0x0,0x600400,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x40,0x200000,0x200000,0x400,0x40,0x200000,0x200000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x11c8de4c,0x0,0x80000,0x0,0x0,0x10,0x6040000,0x6040000,0x0,0x0,0x0,0x8002000,0x8002000,0x0,0x0,0x80100000,0x80100000,0x40000000,0x0,0x100,0x80,0x0,0x0,0x0,0x6040000,0x0,0xc0de4c,0x0,0x0,0xc0de4c,0xc0de4c,0xc440,0xc01a40,0x0,0xc,0xc,0xc440,0x0,0x0,0x0,0x0,0x0,0x0,0x11c8de4c,0x0,0x11c8de4c,0x0,0x2c440,0x0,0xc440,0xc440,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x6e1f3ca0,0x0,0x80000,0x0,0x200,0x0,0x4d,0x4d,0x400000,0x0,0x0,0x10,0x10,0x1000000,0x1000000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x4c,0x1,0x6e173ca0,0x0,0x0,0x60173ca0,0x60173ca0,0x60132080,0x40020,0x0,0x1c00,0x1c00,0x60132080,0x60000000,0x40000000,0x0,0x2e000000,0xe000000,0xe000000,0x6e1f3ca0,0x0,0x6e1f3ca0,0x0,0x20132082,0x0,0x20132082,0x132080,0x20000,0x20000,0x40000000,0x40000000,0x0,0x20000000,0x20000000,0x0,0x0,0x20000000,0x20000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XPath2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public XPath2Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XPath2ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XPath2Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XPath2ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XPath2Parser(XPath2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XPath2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[109];
    for (int i = 0; i < 109; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 63; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 109; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        //
        // TODO
        // Check to ensure the final lexical state not inside a comment.
        // This would indicate an unbalanced comment.
        //
}

/*
 *  Copyright (c) 2002-2003, the pmd-netbeans team
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 *  DAMAGE.
 */
package pmd;

import java.awt.Frame;
import java.util.ResourceBundle;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;

import org.openide.ErrorManager;
import org.openide.windows.WindowManager;

/**
 * Non-modal dialog box displaying the progress of a PMD code scan operation and allowing the user to cancel
 * it.
 */
public class ProgressDialog extends JDialog implements RunPMDCallback {
	
	private final ResourceBundle bundle;

	/** Creates a new ProgressDialog with the given frame as a parent.
	 *
	 * @param parent the parent of this dialog. Typically this would be
	 *               <code>WindowManager.getDefault().getMainWindow()</code>.
	 */
	public ProgressDialog(Frame parent) {
		super(parent, false);
		bundle = ResourceBundle.getBundle("pmd/Bundle");
		initComponents();
	}
	
	/** Creates a new ProgressDialog with the default WindowManager's main window
	 * (as returned by <code>WindowManager.getDefault().getMainWindow()</code>)
	 * as a parent.
	 */
	public ProgressDialog() {
		this(findParent());
	}
	
	private static Frame findParent() {
		final Frame[] frameReceiver = new Frame[1];
		try {
			SwingUtilities.invokeAndWait(new Runnable() {
				public void run() {
					frameReceiver[0] = WindowManager.getDefault().getMainWindow();
				}
			});
		} catch(Exception e) {
			ErrorManager.getDefault().notify(e);
		}
		return frameReceiver[0];
	}
	
	/**
	 * Yields whether the cancel button has been pressed.
	 *
	 * @return true if the cancel button has been pressed.
	 */
	public boolean isCancelled() {
		return isCancelled;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.JLabel progressBarLabel;

        progressBarLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle(bundle.getString("TEXT_dialogTitle"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        progressBarLabel.setText(bundle.getString("LBL_progressBar"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        getContentPane().add(progressBarLabel, gridBagConstraints);

        progressBar.setMinimum(1);
        progressBar.setToolTipText(bundle.getString("HINT_progressBar"));
        progressBar.setPreferredSize(new java.awt.Dimension(320, 21));
        progressBar.setString(Integer.toString(progressBar.getValue()) + "/" + Integer.toString(progressBar.getMaximum()));
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 12);
        getContentPane().add(progressBar, gridBagConstraints);

        updateCancelButton();
        cancelButton.setMnemonic(bundle.getString("MNM_cancelButton").charAt(0));
        cancelButton.setText(bundle.getString("BTN_cancelButton"));
        cancelButton.setToolTipText(bundle.getString("HINT_cancelButton"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 11, 11);
        getContentPane().add(cancelButton, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		isCancelled = true;
		updateCancelButton();
	}//GEN-LAST:event_cancelButtonActionPerformed
	
	/** Closes the dialog, resetting its state.
	 *
	 * @param evt ignored, may be null.
	 */
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		setVisible(false);
		isCancelled = false;
		updateCancelButton();
		dispose();
	}//GEN-LAST:event_closeDialog
	
	/**
	 * Updates the state of the Cancel button according to whether the operation is cancelled or not.
	 */
	private void updateCancelButton() {
		if(isCancelled()) {
			cancelButton.setEnabled(false);
			cancelButton.setText(bundle.getString("BTN_cancelButton_cancelling"));
			cancelButton.setToolTipText(bundle.getString("HINT_cancelButton_cancelling"));
		} else {
			cancelButton.setEnabled(true);
			cancelButton.setText(bundle.getString("BTN_cancelButton"));
			cancelButton.setToolTipText(bundle.getString("HINT_cancelButton"));
		}
	}
	
	/**
	 * This implementation sets the progress bar maximum, and opens the dialog by calling <code>show</code>.
	 *
	 * @param numFiles the number of files to process.
	 */
	public void pmdStart(int numFiles) {
		progressBar.setMaximum(numFiles);
		setVisible(true);
	}

	/**
	 * This implementation updates the progress bar and returns true unless {@link #isCancelled} is true.
	 * 
	 * @param index the current file
	 * @return true,or false if {@link #isCancelled} has been called.
	 */
	public boolean pmdProgress(int index) {
		progressBar.setValue(index);
		progressBar.setString(Integer.toString(index) + '/' + progressBar.getMaximum());
		return !isCancelled();
	}

	/**
	 * This implementation closes the dialog and resets its state, by calling
	 * {@link closeDialog closeDialog(null)}.
	 */
	public void pmdEnd() {
		closeDialog(null);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * Tracks whether or not the PMD operation has been cancelled.
	 */
	private boolean isCancelled = false;
}
